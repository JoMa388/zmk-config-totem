#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

&mt {
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        Left_Enter {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
        };
    };

    behaviors {
        bt_toggle: bt_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_TOGGLE";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>, <&bt BT_SEL 1>;
        };

        Win_Spotlight: Win_Spotlight {
            compatible = "zmk,behavior-tap-dance";
            label = "WIN_SPOTLIGHT";
            #binding-cells = <0>;
            bindings = <&kp LGUI>, <&kp LA(SPACE)>;
        };
    };

    macros {
        Delete_Line: Delete_Line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&macro_wait_time 20>, <&kp BACKSPACE>;

            label = "DELETE_LINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&out OUT_TOG   &kp Q  &kp W       &kp F        &kp P        &kp B             &kp J          &mt RSHFT L  &mt RCTRL U  &mt RALT Y  &kp DQT   &kp TILDE
&mt LCTRL ESC  &kp A  &mt LALT R  &mt LCTRL S  &mt LSHFT T  &kp G             &kp M          &kp N        &kp E        &kp I       &kp O     &kp SEMI
&kp SQT        &kp Z  &kp X       &kp C        &kp D        &kp V             &kp K          &kp H        &kp COMMA    &kp DOT     &kp FSLH  &kp BACKSLASH
                                  &lt 4 TAB    &lt 1 SPACE  &Win_Spotlight    &kp RIGHT_GUI  &lt 2 BSPC   &kp ENTER
            >;
        };

        Number_Symbol {
            bindings = <
&kp TILDE  &bt BT_PRV    &bt BT_NXT    &kp C_MUTE    &kp C_VOL_DN  &kp C_VOL_UP    &kp EXCL              &kp AT          &kp HASH          &kp DOLLAR         &kp PERCENT      &trans
&kp CAPS   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5          &kp LEFT_PARENTHESIS  &kp LEFT_BRACE  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS
&kp GRAVE  &kp N6        &kp N7        &kp N8        &kp N9        &kp N0          &kp MINUS             &kp PLUS        &kp EQUAL         &kp AMPS           &kp ASTRK        &kp UNDER
                                       &none         &trans        &none           &Delete_Line          &mo 3           &kp DELETE
            >;
        };

        Modifer {
            bindings = <
&kp F1  &kp F2        &kp F3          &mmv MOVE_UP    &kp F4           &kp F5            &kp MINUS       &kp PLUS          &kp EQUAL          &kp UNDER        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp F6  &msc SCRL_UP  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN    &kp LEFT        &kp DOWN          &kp UP             &kp RIGHT        &kp LEFT_BRACE        &kp RIGHT_BRACE
&kp F7  &kp F8        &kp F9          &kp F10         &kp F11          &kp F12           &msc SCRL_LEFT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &msc SCRL_RIGHT  &kp LEFT_BRACKET      &kp RIGHT_BRACKET
                                      &mkp LCLK       &mo 3            &mkp RCLK         &none           &trans            &none
            >;
        };

        System {
            bindings = <
&trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &bt BT_CLR
&bt_toggle   &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
&bootloader  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &bootloader
                                         &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans              &trans              &trans              &trans              &trans                &trans                  &trans                  &trans                  &trans                  &trans                  &trans
&trans  &kp LS(LC(LA(N1)))  &kp LS(LA(LC(N2)))  &kp LA(LS(LC(N3)))  &kp LS(LA(LC(N4)))  &kp LS(LA(LC(N5)))    &kp RC(RA(RS(RG(N1))))  &kp RA(RS(RC(RG(N2))))  &kp RS(RA(RC(RG(N3))))  &kp RS(RA(RC(RG(N4))))  &kp RS(RA(RC(RG(N5))))  &trans
&trans  &kp LS(LA(LC(N6)))  &kp LS(LA(LC(N7)))  &kp LS(LA(LC(N8)))  &kp LS(LA(LC(N9)))  &kp LA(LS(LC(N0)))    &kp RS(RA(RC(RG(N6))))  &kp RS(RA(RC(N7)))      &kp RS(RA(RC(RG(N8))))  &kp RS(RC(RG(RA(N9))))  &kp RS(RA(RC(RG(N0))))  &trans
                                                &trans              &trans              &trans                &trans                  &trans                  &trans
            >;
        };
    };
};
