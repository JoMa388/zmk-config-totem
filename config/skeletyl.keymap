#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

&mt {
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        Left_Enter {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
        };

        Backspace {
            bindings = <&kp BSPC>;
            key-positions = <28 27>;
        };
    };

    behaviors {
        bt_toggle: bt_toggle {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_TOGGLE";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 0>, <&bt BT_SEL 1>;
        };

        Win_Spotlight: Win_Spotlight {
            compatible = "zmk,behavior-tap-dance";
            label = "WIN_SPOTLIGHT";
            #binding-cells = <0>;
            bindings = <&kp LGUI>, <&kp LA(SPACE)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 36 37 38>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41>;
            hold-trigger-on-release;
        };
    };

    macros {
        Delete_Line: Delete_Line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(A)>, <&macro_wait_time 20>, <&kp BACKSPACE>;

            label = "DELETE_LINE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&out OUT_TOG   &kp Q        &kp W       &kp F        &kp P        &kp B             &kp J          &kp L        &kp U            &kp Y         &kp DQT   &kp TILDE
&mt LCTRL ESC  &hml LGUI A  &mt LALT R  &mt LCTRL S  &mt LSHFT T  &kp G             &kp M          &kp N        &kp E            &kp I         &kp O     &kp SEMI
&kp SQT        &kp Z        &kp X       &kp C        &kp D        &kp V             &kp K          &mt RSHFT H  &mt RCTRL COMMA  &mt RALT DOT  &kp FSLH  &kp BACKSLASH
                                        &lt 4 TAB    &lt 1 SPACE  &Win_Spotlight    &kp RIGHT_GUI  &lt 2 BSPC   &kp ENTER
            >;
        };

        Number_Symbol {
            bindings = <
&kp C_VOL_UP  &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PERCENT    &kp UNDER         &kp AMPS        &kp ASTRK             &kp GRAVE              &kp TILDE        &trans
&kp C_MUTE    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5         &kp LEFT_BRACKET  &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp RIGHT_BRACKET
&kp C_VOL_DN  &kp N6        &kp N7        &kp N8        &kp N9        &kp N0         &kp MINUS         &kp PLUS        &kp EQUAL             &kp GREATER_THAN       &trans           &trans
                                          &none         &trans        &none          &Delete_Line      &mo 3           &kp DELETE
            >;
        };

        Modifer {
            bindings = <
&trans   &kp F1   &kp F2          &kp F3          &kp F4           &kp F5       &kp F6          &kp F7          &kp F8        &kp F9           &kp F10  &trans
&kp F10  &kp F11  &mmv MOVE_LEFT  &mmv MOVE_UP    &mmv MOVE_RIGHT  &trans       &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &kp F11  &trans
&trans   &kp F12  &trans          &mmv MOVE_DOWN  &trans           &trans       &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &kp F12  &trans
                                  &mkp LCLK       &mo 3            &mkp RCLK    &none           &trans          &none
            >;
        };

        System {
            bindings = <
&trans       &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0    &trans  &trans  &trans          &trans  &trans  &bt BT_CLR
&bt_toggle   &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans          &trans  &trans  &trans
&bootloader  &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans          &trans  &trans  &bootloader
                                         &trans        &trans        &trans          &trans  &trans  &bt BT_CLR_ALL
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans              &trans              &trans              &trans              &trans                &trans                  &trans                  &trans                  &trans                  &trans                  &trans
&trans  &kp LS(LC(LA(N1)))  &kp LS(LA(LC(N2)))  &kp LA(LS(LC(N3)))  &kp LS(LA(LC(N4)))  &kp LS(LA(LC(N5)))    &kp RC(RA(RS(RG(N1))))  &kp RA(RS(RC(RG(N2))))  &kp RS(RA(RC(RG(N3))))  &kp RS(RA(RC(RG(N4))))  &kp RS(RA(RC(RG(N5))))  &trans
&trans  &kp LS(LA(LC(N6)))  &kp LS(LA(LC(N7)))  &kp LS(LA(LC(N8)))  &kp LS(LA(LC(N9)))  &kp LA(LS(LC(N0)))    &kp RS(RA(RC(RG(N6))))  &kp RS(RA(RC(N7)))      &kp RS(RA(RC(RG(N8))))  &kp RS(RC(RG(RA(N9))))  &kp RS(RA(RC(RG(N0))))  &trans
                                                &trans              &trans              &trans                &trans                  &trans                  &trans
            >;
        };
    };
};
