#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
    hold-trigger-on-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        Left_Enter {
            bindings = <&kp ENTER>;
            key-positions = <15 16>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &out OUT_TOG   &kp Q  &kp W       &kp F         &kp P        &kp B      &kp J          &kp L        &kp U        &kp Y       &kp SQT   &kp COLON
  &mt LCTRL ESC  &kp A  &mt LALT R  &mt LCTRL S   &mt LSHFT T  &kp G      &kp M          &mt RSHFT N  &mt RCTRL E  &mt RALT I  &kp O     &kp SEMI
  &kp TAB        &kp Z  &kp X       &kp C         &kp D        &kp V      &kp K          &kp H        &kp COMMA    &kp DOT     &kp FSLH  &kp BACKSLASH
                                    &kp LEFT_GUI  &lt 1 SPACE  &lt 4 TAB  &kp RIGHT_GUI  &lt 2 BSPC   &kp ENTER
            >;
        };

        Number_Symbol {
            bindings = <
  &kp GRAVE   &kp N1                &kp N2                 &kp N3      &kp N4            &kp N5             &kp EXCL   &kp AT    &kp HASH    &kp DOLLAR      &kp PERCENT      &trans
  &bt BT_NXT  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp C_NEXT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS  &kp PLUS  &kp EQUAL   &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp CAPS
  &bt BT_NXT  &kp N6                &kp N7                 &kp N8      &kp N9            &kp N0             &kp UNDER  &kp AMPS  &kp ASTRK   &kp C_VOL_DN    &kp C_VOL_UP     &kp C_MUTE
                                                           &trans      &trans            &trans             &trans     &mo 3     &kp DELETE
            >;
        };

        Modifer {
            bindings = <
  &trans  &trans  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &msc SCRL_UP     &kp F1    &kp F2    &kp F3  &kp F4     &kp F5          &trans
  &trans  &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN   &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp LEFT_BRACE  &kp RIGHT_BRACE
  &trans  &trans  &trans          &trans          &msc SCRL_LEFT   &msc SCRL_RIGHT  &kp F6    &kp F7    &kp F8  &kp F9     &kp F10         &trans
                                  &kp F11         &mo 3            &kp F12          &trans    &trans    &trans
            >;
        };

        System {
            bindings = <
  &trans       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans  &trans  &trans  &trans  &trans  &trans
  &trans       &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
  &bootloader  &trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &bootloader
                                           &trans        &trans        &trans        &trans  &trans  &trans
            >;
        };

        layer_4 {
            bindings = <
  &trans  &trans              &trans              &trans              &trans              &trans              &trans                  &trans                  &trans                  &trans                  &trans                  &trans
  &trans  &kp LS(LC(LA(N1)))  &kp LS(LA(LC(N2)))  &kp LA(LS(LC(N3)))  &kp LS(LA(LC(N4)))  &kp LS(LA(LC(N5)))  &kp RC(RA(RS(RG(N1))))  &kp RA(RS(RC(RG(N2))))  &kp RS(RA(RC(RG(N3))))  &kp RS(RA(RC(RG(N4))))  &kp RS(RA(RC(RG(N5))))  &trans
  &trans  &kp LS(LA(LC(N6)))  &kp LS(LA(LC(N7)))  &kp LS(LA(LC(N8)))  &kp LS(LA(LC(N9)))  &kp LA(LS(LC(N0)))  &kp RS(RA(RC(RG(N6))))  &kp RS(RA(RC(N7)))      &kp RS(RA(RC(RG(N8))))  &kp RS(RC(RG(RA(N9))))  &kp RS(RA(RC(RG(N0))))  &trans
                                                  &trans              &trans              &trans              &trans                  &trans                  &trans
            >;
        };
    };
};
